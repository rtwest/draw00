QUESTIONS
-----------------------------


S T O R A G E 
=======================================================================================
Azure Tables
------------
PARENT RECORD: id, name, email
KID RECORD: id, name, parent_id, profileimage, registration_code, reg_status
FRIEND RECORD: kid_id1, kid_id2
INVITATION RECORD: from_parent_id, from_kid_id, to_parent_id, to_kid_id, status, datetime
COMMENT RECORD: picture_id, from_kid_id, to_kid_id, comment_content, datetime
PICTURE RECORD: picture_id, kid_id, datetime
SHARE RECORD: picture_id, from_kid_id, to_kid_id

Pouch DB Tables in "drawappDatabase" on client side for large storage
------------------------------------
IMAGE RECORD: _id, filepath on device, datetime

Array on client side for small storage  
----------------------------------
Other local client side needs
- Flag for first time launch: Look for "localStorage.getItem('RYB_oobeflag')"
- FaceBook Access Token: Calling the NbFB module automatically stores the user's FaceBook token:  Look for "localStorage.getItem('fbAccessToken')"
- What user mode is this in? Look for "localStorage.getItem('RYB_userarray')"
	- 'RYB_userarray' (id, usertype, name, email, first name, ..other_as_needed..)
	- admin details (name, parent_id, reqs FB registration?)
	- client details (name, kid_id) - if not, show client code input
- for client, list of friends (name, kid_id) - FRIENDS ARRAY
- for admin, list of clients (name, kid_id) - CLIENT ARRAY

=======================================================================================




CREATING A NEW INVITATION
1. enter parent email and lookup to verify
2. enter the kids display name and lookup to verify
3. default to the display of the kid whose context you're creating the invitation in
4. create new invitation record with the 4 corresponding IDs


 REGISTERING THE CLIENT DEVICE WITH PARENT DEVICE
 - On Parent device, create kid record with Display_Name. This creates a record with a generated Registration_Code and Status of "pending"
 - On Client device, after splash screen, enter kid Display_Name and matching Registration_Code.  When verified, change Status




 TO DO
-----------------------------
- Need to think through start up login and checking registration from App.JS on startup
-- What is need for local DB? - Mode, UserRegistration_ID, UserName, -- gallery stuff --
- Need to check for web connection on load and alert
- Need to restrict permissions on azure tables to authenticate users for admin and client(probably) 





View
------------
- Add splash screen
- Start with Gallery as Home screen.  Seed it with one picture.
-	easy button for New Picture.  easy button for Add Friends.
-	show shares and likes on the gallery - remember kids are learning counting - be visual.
-	order by most recent activity - new picture, new likes, new stickers
-	show your pictures, and pictures shared with you.  
-		Clearly divide these. split screen.
-		Color code friends. Stack pictures by friend. Profile image has colored circle background. Image shared has colored background.
-		Easy button to like friends picture
- gallery detailed image view
-	where you delete image if yours
-	if shared image, you can like it here also







Azure Wrapper Examples
-----------------------
- Uses JSON obj
- You can use custom row IDs when inserting
- When updating, specify the row ID and values to update
- https://github.com/TerryMooreII/angular-azure-mobile-service
// Query example where col = val
------------------------------
Azureservice.read('parents', "$filter=email eq 'bogus@test.com'")
  .then(function (items) {
      console.log(items)
      console.log(items.length)
  }).catch(function (error) {
      console.log(error)
  })
// Insert example with customer row ID
------------------------------
Azureservice.insert('parents', {
    id: globalService.makeUniqueID(), // made GUID for Azure table
    name: 'johny quest',
    email: 'test@test.com',
})
.then(function () {
    console.log('Insert successful');
}, function (err) {
    console.error('Azure Error: ' + err);
});
// Update example with customer row ID
------------------------------
Azureservice.update('kids', {
    id: rowGUID, // ID for the row to update
    status: 'accepted', // columns to update
})
.then(function () {
    console.log('Update successful');
}, function (err) {
    console.error('Azure Error: ' + err);
});
