W O R K I N G   R I G H T   N O W
-----------------------------

-  SAVE and SHARE/UPLOAD are 2 different actions
- Send Push Notifications on Insert Events.  ??? Can PN have <img>?
- ALSO NEED TO CLEAN BLOB STORAGE WEEKLY
- @@@ THINK THROUGH SHARING WORKFLOW
- Need better Picture Save Indicator.  Need better Picuture Shared indicator

 TO DO
-----------------------------
- Loaders and Progress indicators when awaiting on Azure response
- Pull new friends from client to update client
- Need to check for web connection on load and alert
- ??? Need to restrict permissions on azure tables to authenticate users for admin and client(probably) 






P R O B L E M S
-----------------------------
- Had a problem in creating Azure push notifications.  I think I solved it by remove the Azure mobile web services JS file - which was redundant to the Azure cordova plugin.  I thought I needed the JS file for the NG Azure JS wrapper but all the Azure table CRUD ops work fine without it.
- Insert JS on NODE for FRIEND INSERT.  Need registered clients to test if Push Notification works.
- !!! Registering for Push Notification seems to block other Azure calls when waiting for response
- Avoid calling Azure on the View load because you'll be making lots to external calls if the View is loaded frequently
- On ClientProperties on the Admin side, have a client array locally, then query azure for client's friends, then query Azure recursively for those friends details.  Gets to be a lot.
- Don't forget, if you delete a Client, you have to delete it from other records across all tables
- The iteration on friends to go get details of each friend is still going over the count and errors.  Mitigated with an IF,THEN check
- Security Content Policy with PouchDB.  Added -- <meta http-equiv="Content-Security-Policy" connect-src * blob: data:; ... ...> which seems to work.
- ***REGISTERING FOR PUSH SOMETIMES FAILS AND TAKE A WHILE TO - IT BLOCKS OTHER AZURE CALLS UNTIL IT FAILS


S T O R A G E 
=======================================================================================
Azure Tables
------------
PARENT RECORD: id, name, email
KID RECORD: id, name, parent_id, registration_code, reg_status, avatar_id, parent_name, parent_email
FRIEND RECORD: id, kid1_id, kid2_id, kid1_name, kid2_name
INVITATION RECORD: id, fromparent_id, toparent_id, fromkid (name), tokid (name), fromparent_name, toparent_name, fromkid_id, tokid_id.  - Status is implied as pending because its in the table.  Remove when accepted.
EVENT RECORD: id, picture_url, fromkid_id, fromkid_name, tokid_id, tokid_name, event_type, comment_content, datetime
PICTURE RECORD: id, picture_url, kid_id, datetime

Pouch DB Tables in "drawappDatabase" on client side for large storage
------------------------------------
IMAGE RECORD: _id, filepath on device, datetime

Array on client side for small storage  
----------------------------------
Other local client side needs
- Flag for first time launch: Look for "localStorage.getItem('RYB_oobeflag')"
- FaceBook Access Token: Calling the NbFB module automatically stores the user's FaceBook token:  Look for "localStorage.getItem('fbAccessToken')"
- What user mode is this in? Look for "localStorage.getItem('RYB_userarray')"
	- 'RYB_userarray' (id, usertype, name, email, first name, ..other_as_needed..)
	- admin details (name, parent_id, reqs FB registration?)
	- client details (name, kid_id, avatar_id) - if not, show client code input
- In CLIENT mode, list of friends (name, kid_id, avatar_id,) - FRIENDS ARRAY
- In ADMIN mode, list of clients (kid_id, name, avatar_id,) - CLIENT ARRAY  // This is an array of arrays - [[...,...][...,...][...,...]]

=======================================================================================




CREATING A NEW INVITATION
1. enter parent email and lookup to verify
2. enter the kids display name and lookup to verify
3. default to the display of the kid whose context you're creating the invitation in
4. create new invitation record with the 4 corresponding IDs

 REGISTERING THE CLIENT DEVICE WITH PARENT DEVICE
 1. On Parent device, create kid record with Display_Name. This creates a record with a generated Registration_Code and Status of "pending"
 2. On Client device, after splash screen, enter kid Display_Name and matching Registration_Code.  When verified, change Status







View
------------
- Add splash screen
- Start with Gallery as Home screen.  Seed it with one picture.
-	easy button for New Picture.  easy button for Add Friends.
-	show shares and likes on the gallery - remember kids are learning counting - be visual.
-	order by most recent activity - new picture, new likes, new stickers
-	show your pictures, and pictures shared with you.  
-		Clearly divide these. split screen.
-		Color code friends. Stack pictures by friend. Profile image has colored circle background. Image shared has colored background.
-		Easy button to like friends picture
- gallery detailed image view
-	where you delete image if yours
-	if shared image, you can like it here also







Azure Wrapper Examples
-----------------------
- Uses JSON obj
- You can use custom row IDs when inserting
- When updating, specify the row ID and values to update
- https://github.com/TerryMooreII/angular-azure-mobile-service
// Query example where col = val
------------------------------
Azureservice.read('parents', "filter=email eq 'bogus@test.com' or name eq 'FirstName'")
  .then(function (items) {
      console.log(items)
      console.log(items.length)
  }).catch(function (error) {
      console.log(error)
  })
// Different query example with Parament Object not string
------------------------------
Azureservice.query('invitations',{
    criteria:{
		id: '1234-qwer-1234-asdf',
		status: '0'
		}
    })
    .then(function(items) {
        console.log('Query successful');
        $scope.item = items;
    }, function(err) {
        console.error('Azure Error: ' + err);
    });
// Get a single item
------------------------------
Azureservice.getById('todoListTable', '5A25CD78-F2D9-413C-81CA-6EC090590AAF')
    .then(function(item) {
        console.log('Query successful');
        $scope.item = item;
    }, function(err) {
        console.error('Azure Error: ' + err);
    });
// Insert example with customer row ID
------------------------------
Azureservice.insert('parents', {
    id: globalService.makeUniqueID(), // made GUID for Azure table
    name: 'johny quest',
    email: 'test@test.com',
})
.then(function () {
    console.log('Insert successful');
}, function (err) {
    console.error('Azure Error: ' + err);
});
// Update example with customer row ID
------------------------------
Azureservice.update('kids', {
    id: rowGUID, // ID for the row to update
    status: 'accepted', // column(s) to update
})
.then(function () {
    console.log('Update successful');
}, function (err) {
    console.error('Azure Error: ' + err);
});
// Delete example with customer row ID
------------------------------
Azureservice.del('tablename', {
    id: rowGUID // ID for the row to delete    
})
.then(function() {
        console.log('Delete successful');
}, function(err) {
        console.error('Azure Error: ' + err);
});
